# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(raw_pdb
	LANGUAGES
		CXX
)

# Target raw_pdb
set(CMKR_TARGET raw_pdb)
set(raw_pdb_SOURCES "")

list(APPEND raw_pdb_SOURCES
	"src/CoalescedMSFStream.cpp"
	"src/DBIStream.cpp"
	"src/DirectMSFStream.cpp"
	"src/GlobalSymbolStream.cpp"
	"src/IPIStream.cpp"
	"src/ImageSectionStream.cpp"
	"src/InfoStream.cpp"
	"src/ModuleInfoStream.cpp"
	"src/ModuleSymbolStream.cpp"
	"src/PDB.cpp"
	"src/PublicSymbolStream.cpp"
	"src/RawFile.cpp"
	"src/SectionContributionStream.cpp"
	"src/SourceFileStream.cpp"
	"include/raw_pdb/CoalescedMSFStream.h"
	"include/raw_pdb/Core/ArrayView.h"
	"include/raw_pdb/Core/BaseTypes.h"
	"include/raw_pdb/Core/BitOperators.h"
	"include/raw_pdb/Core/BitUtil.h"
	"include/raw_pdb/Core/FlexibleStruct.h"
	"include/raw_pdb/Core/Platform.h"
	"include/raw_pdb/Core/PointerUtil.h"
	"include/raw_pdb/Core/TypeTraits.h"
	"include/raw_pdb/DBIStream.h"
	"include/raw_pdb/DBITypes.h"
	"include/raw_pdb/DirectMSFStream.h"
	"include/raw_pdb/ErrorCodes.h"
	"include/raw_pdb/GlobalSymbolStream.h"
	"include/raw_pdb/IPIStream.h"
	"include/raw_pdb/IPITypes.h"
	"include/raw_pdb/ImageSectionStream.h"
	"include/raw_pdb/InfoStream.h"
	"include/raw_pdb/ModuleInfoStream.h"
	"include/raw_pdb/ModuleSymbolStream.h"
	"include/raw_pdb/PDB.h"
	"include/raw_pdb/PDBTypes.h"
	"include/raw_pdb/PublicSymbolStream.h"
	"include/raw_pdb/RawFile.h"
	"include/raw_pdb/SectionContributionStream.h"
	"include/raw_pdb/SourceFileStream.h"
	"include/raw_pdb/Util.h"
)

list(APPEND raw_pdb_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${raw_pdb_SOURCES})
add_library(raw_pdb STATIC)

if(raw_pdb_SOURCES)
	target_sources(raw_pdb PRIVATE ${raw_pdb_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${raw_pdb_SOURCES})

add_library(raw_pdb::raw_pdb ALIAS raw_pdb)
target_compile_features(raw_pdb PUBLIC
	cxx_std_14
)

target_include_directories(raw_pdb PUBLIC
	include
)

target_include_directories(raw_pdb PRIVATE
	src
	"include/raw_pdb"
)


unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target examples
set(CMKR_TARGET examples)
set(examples_SOURCES "")

list(APPEND examples_SOURCES
	"examples/ExampleContributions.cpp"
	"examples/ExampleFunctionSymbols.cpp"
	"examples/ExampleMain.cpp"
	"examples/ExampleMemoryMappedFile.cpp"
	"examples/ExampleSymbols.cpp"
	"examples/ExampleTimedScope.cpp"
	"examples/ExampleMemoryMappedFile.h"
	"examples/ExampleTimedScope.h"
)

list(APPEND examples_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${examples_SOURCES})
add_executable(examples)

if(examples_SOURCES)
	target_sources(examples PRIVATE ${examples_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT examples)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${examples_SOURCES})

target_compile_features(examples PRIVATE
	cxx_std_14
)

target_include_directories(examples PRIVATE
	examples
)

target_link_libraries(examples PRIVATE
	raw_pdb::raw_pdb
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target fuzztarget
set(CMKR_TARGET fuzztarget)
set(fuzztarget_SOURCES "")

list(APPEND fuzztarget_SOURCES
	"fuzztarget/Main.cpp"
)

list(APPEND fuzztarget_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${fuzztarget_SOURCES})
add_executable(fuzztarget)

if(fuzztarget_SOURCES)
	target_sources(fuzztarget PRIVATE ${fuzztarget_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT fuzztarget)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${fuzztarget_SOURCES})

target_compile_features(fuzztarget PRIVATE
	cxx_std_14
)

target_include_directories(fuzztarget PRIVATE
	fuzztarget
)

target_link_libraries(fuzztarget PRIVATE
	raw_pdb::raw_pdb
)

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

